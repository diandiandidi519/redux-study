{"version":3,"file":"redux.js","sources":["../src/utils/symbol-observable.ts","../src/utils/actionTypes.ts","../src/utils/isPlainObject.ts","../src/utils/kindOf.ts","../src/createStore.ts","../src/utils/warning.ts","../src/combineReducers.ts","../src/bindActionCreators.ts","../src/compose.ts","../src/applyMiddleware.ts","../src/index.ts"],"sourcesContent":["declare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\nconst $$observable = /* #__PURE__ */ (() =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n\nexport default $$observable\n","/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nconst randomString = () =>\n  Math.random().toString(36).substring(7).split('').join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */ randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */ randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n","/**\n * @param obj The object to inspect.\n * @returns True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: any): boolean {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n","// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nexport function miniKindOf(val: any): string {\n  if (val === void 0) return 'undefined'\n  if (val === null) return 'null'\n\n  const type = typeof val\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function': {\n      return type\n    }\n  }\n\n  if (Array.isArray(val)) return 'array'\n  if (isDate(val)) return 'date'\n  if (isError(val)) return 'error'\n\n  const constructorName = ctorName(val)\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName\n  }\n\n  // other\n  return Object.prototype.toString\n    .call(val)\n    .slice(8, -1)\n    .toLowerCase()\n    .replace(/\\s/g, '')\n}\n\nfunction ctorName(val: any): string | null {\n  return typeof val.constructor === 'function' ? val.constructor.name : null\n}\n\nfunction isError(val: any) {\n  return (\n    val instanceof Error ||\n    (typeof val.message === 'string' &&\n      val.constructor &&\n      typeof val.constructor.stackTraceLimit === 'number')\n  )\n}\n\nfunction isDate(val: any) {\n  if (val instanceof Date) return true\n  return (\n    typeof val.toDateString === 'function' &&\n    typeof val.getDate === 'function' &&\n    typeof val.setDate === 'function'\n  )\n}\n\nexport function kindOf(val: any) {\n  let typeOfVal: string = typeof val\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val)\n  }\n\n  return typeOfVal\n}\n","import $$observable from './utils/symbol-observable'\n\nimport {\n  Store,\n  PreloadedState,\n  StoreEnhancer,\n  Dispatch,\n  Observer,\n  ExtendState\n} from './types/store'\nimport { Action } from './types/actions'\nimport { Reducer } from './types/reducers'\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport { kindOf } from './utils/kindOf'\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param preloadedState The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param enhancer The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n// 进行了函数重载\nexport default function createStore<\n  S,\n  A extends Action,\n  Ext = {},\n  StateExt = never\n>(\n  reducer: Reducer<S, A>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext\nexport default function createStore<\n  S,\n  A extends Action,\n  Ext = {},\n  StateExt = never\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext\nexport default function createStore<\n  S,\n  A extends Action,\n  Ext = {},\n  StateExt = never\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S> | StoreEnhancer<Ext, StateExt>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext {\n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n      'createStore(). This is not supported. Instead, compose them ' +\n      'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'\n    )\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState as StoreEnhancer<Ext, StateExt>\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(\n        `Expected the enhancer to be a function. Instead, received: '${kindOf(\n          enhancer\n        )}'`\n      )\n    }\n\n    return enhancer(createStore)(\n      reducer,\n      preloadedState as PreloadedState<S>\n    ) as Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error(\n      `Expected the root reducer to be a function. Instead, received: '${kindOf(\n        reducer\n      )}'`\n    )\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState as S\n  let currentListeners: (() => void)[] | null = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns The current state tree of your application.\n   */\n  function getState(): S {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n        'The reducer has already received the state as an argument. ' +\n        'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState as S\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   */\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      throw new Error(\n        `Expected the listener to be a function. Instead, received: '${kindOf(\n          listener\n        )}'`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n        'If you would like to be notified after the store has been updated, subscribe from a ' +\n        'component and invoke store.getState() in the callback to access the latest state. ' +\n        'See https://redux.js.org/api/store#subscribelistener for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n          'See https://redux.js.org/api/store#subscribelistener for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n      currentListeners = null\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action: A) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        `Actions must be plain objects. Instead, the actual type was: '${kindOf(\n          action\n        )}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.'\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param nextReducer The reducer for the store to use instead.\n   * @returns The same store instance with a new reducer in place.\n   */\n  function replaceReducer<NewState, NewActions extends A>(\n    nextReducer: Reducer<NewState, NewActions>\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(\n        `Expected the nextReducer to be a function. Instead, received: '${kindOf(\n          nextReducer\n        )}`\n      )\n    }\n\n    // TODO: do this more elegantly\n    ; (currentReducer as unknown as Reducer<NewState, NewActions>) = nextReducer\n\n    // This action has a similar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch({ type: ActionTypes.REPLACE } as A)\n    // change the type of the store by casting it to the new store\n    return store as unknown as Store<\n      ExtendState<NewState, StateExt>,\n      NewActions,\n      StateExt,\n      Ext\n    > &\n      Ext\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer: unknown) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError(\n            `Expected the observer to be an object. Instead, received: '${kindOf(\n              observer\n            )}'`\n          )\n        }\n\n        function observeState() {\n          const observerAsObserver = observer as Observer<S>\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT } as A)\n\n  const store = {\n    dispatch: dispatch as Dispatch<A>,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  } as unknown as Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext\n  return store\n}\n","/**\n * Prints a warning in the console if it exists.\n *\n * @param message The warning message.\n */\nexport default function warning(message: string): void {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n","import { AnyAction, Action } from './types/actions'\nimport {\n  ActionFromReducersMapObject,\n  Reducer,\n  ReducersMapObject,\n  StateFromReducersMapObject\n} from './types/reducers'\nimport { CombinedState } from './types/store'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport warning from './utils/warning'\nimport { kindOf } from './utils/kindOf'\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState: object,\n  reducers: ReducersMapObject,\n  action: Action,\n  unexpectedKeyCache: { [key: string]: true }\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"${kindOf(\n        inputState\n      )}\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\nfunction assertReducerShape(reducers: ReducersMapObject) {\n  // 所有的reducer进行初始化，默认触发INIT的action\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined during initialization. ` +\n        `If the state passed to the reducer is undefined, you must ` +\n        `explicitly return the initial state. The initial state may ` +\n        `not be undefined. If you don't want to set a value for this reducer, ` +\n        `you can use null instead of undefined.`\n      )\n    }\n    // 随机的触发一个action\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined when probed with a random type. ` +\n        `Don't try to handle '${ActionTypes.INIT}' or other actions in \"redux/*\" ` +\n        `namespace. They are considered private. Instead, you must return the ` +\n        `current state for any unknown actions, unless it is undefined, ` +\n        `in which case you must return the initial state, regardless of the ` +\n        `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @template S Combined state object type.\n *\n * @param reducers An object whose values correspond to different reducer\n *   functions that need to be combined into one. One handy way to obtain it\n *   is to use ES6 `import * as reducers` syntax. The reducers may never\n *   return undefined for any action. Instead, they should return their\n *   initial state if the state passed to them was undefined, and the current\n *   state for any unrecognized action.\n *\n * @returns A reducer function that invokes every reducer inside the passed\n *   object, and builds a state object with the same shape.\n */\nexport default function combineReducers<S>(\n  reducers: ReducersMapObject<S, any>\n): Reducer<CombinedState<S>>\nexport default function combineReducers<S, A extends Action = AnyAction>(\n  reducers: ReducersMapObject<S, A>\n): Reducer<CombinedState<S>, A>\nexport default function combineReducers<M extends ReducersMapObject>(\n  reducers: M\n): Reducer<\n  CombinedState<StateFromReducersMapObject<M>>,\n  ActionFromReducersMapObject<M>\n>\nexport default function combineReducers(reducers: ReducersMapObject) {\n  // 获取所有的reducer的keys\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers: ReducersMapObject = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    // 必须是一个函数，否则会被过滤掉\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  // This is used to make sure we don't warn about the same\n  // keys multiple times.\n  let unexpectedKeyCache: { [key: string]: true }\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError: unknown\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n  // 返回一个函数 finalReducers一直留在内存里面\n  // state代表全局的状态\n  // action代表触发\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: AnyAction\n  ) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState: StateFromReducersMapObject<typeof reducers> = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      //老的reducer对应的key\n      const key = finalReducerKeys[i]\n      // 老的reducer函数\n      const reducer = finalReducers[key]\n      // 当前key对应的的state\n      const previousStateForKey = state[key]\n      // 获取触发action以后对应的state\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const actionType = action && action.type\n        throw new Error(\n          `When called with an action of type ${actionType ? `\"${String(actionType)}\"` : '(unknown type)'\n          }, the slice reducer for key \"${key}\" returned undefined. ` +\n          `To ignore an action, you must explicitly return the previous state. ` +\n          `If you want this reducer to hold no value, you can return null instead of undefined.`\n        )\n      }\n      nextState[key] = nextStateForKey\n      // 对比前后的状态看下有没有改变，浅比较并且是全等\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    // 只要有一个state不相等，或者前后的key个数不等，就是改变了\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n","import { Dispatch } from './types/store'\nimport {\n  AnyAction,\n  ActionCreator,\n  ActionCreatorsMapObject\n} from './types/actions'\nimport { kindOf } from './utils/kindOf'\n\nfunction bindActionCreator<A extends AnyAction = AnyAction>(\n  actionCreator: ActionCreator<A>,\n  dispatch: Dispatch\n) {\n  return function (this: any, ...args: any[]) {\n    return dispatch(actionCreator.apply(this, args))\n  }\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators<A, C extends ActionCreator<A>>(\n  actionCreator: C,\n  dispatch: Dispatch\n): C\n\nexport default function bindActionCreators<\n  A extends ActionCreator<any>,\n  B extends ActionCreator<any>\n>(actionCreator: A, dispatch: Dispatch): B\n\nexport default function bindActionCreators<\n  A,\n  M extends ActionCreatorsMapObject<A>\n>(actionCreators: M, dispatch: Dispatch): M\nexport default function bindActionCreators<\n  M extends ActionCreatorsMapObject,\n  N extends ActionCreatorsMapObject\n>(actionCreators: M, dispatch: Dispatch): N\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator<any> | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, but instead received: '${kindOf(\n        actionCreators\n      )}'. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  const boundActionCreators: ActionCreatorsMapObject = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n","type Func<T extends any[], R> = (...a: T) => R\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R\n\nexport default function compose<F extends Function>(f: F): F\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n  f1: (a: A) => R,\n  f2: Func<T, A>\n): Func<T, R>\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n  f1: (b: B) => R,\n  f2: (a: A) => B,\n  f3: Func<T, A>\n): Func<T, R>\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n  f1: (c: C) => R,\n  f2: (b: B) => C,\n  f3: (a: A) => B,\n  f4: Func<T, A>\n): Func<T, R>\n\n/* rest */\nexport default function compose<R>(\n  f1: (a: any) => R,\n  ...funcs: Function[]\n): (...args: any[]) => R\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R\n\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args: any) =>\n        a(b(...args))\n  )\n}\n","import compose from './compose'\nimport { Middleware, MiddlewareAPI } from './types/middleware'\nimport { AnyAction } from './types/actions'\nimport {\n  StoreEnhancer,\n  Dispatch,\n  PreloadedState,\n  StoreEnhancerStoreCreator\n} from './types/store'\nimport { Reducer } from './types/reducers'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param middlewares The middleware chain to be applied.\n * @returns A store enhancer applying the middleware.\n *\n * @template Ext Dispatch signature added by a middleware.\n * @template S The type of the state supported by a middleware.\n */\nexport default function applyMiddleware(): StoreEnhancer\nexport default function applyMiddleware<Ext1, S>(\n  middleware1: Middleware<Ext1, S, any>\n): StoreEnhancer<{ dispatch: Ext1 }>\nexport default function applyMiddleware<Ext1, Ext2, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>,\n  middleware5: Middleware<Ext5, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5 }>\nexport default function applyMiddleware<Ext, S = any>(\n  ...middlewares: Middleware<any, S, any>[]\n): StoreEnhancer<{ dispatch: Ext }>\nexport default function applyMiddleware(\n  ...middlewares: Middleware[]\n): StoreEnhancer<any> {\n  //连续返回了两个函数，函数柯里化\n  return (createStore: StoreEnhancerStoreCreator) =>\n    <S, A extends AnyAction>(\n      reducer: Reducer<S, A>,\n      preloadedState?: PreloadedState<S>\n    ) => {\n      const store = createStore(reducer, preloadedState)\n      let dispatch: Dispatch = () => {\n        throw new Error(\n          'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n        )\n      }\n      // 传个了中间件getState和dispatch参数\n      const middlewareAPI: MiddlewareAPI = {\n        getState: store.getState,\n        dispatch: (action, ...args) => dispatch(action, ...args)\n      }\n      const chain = middlewares.map(middleware => middleware(middlewareAPI))\n      // 被一层层的中间件加强了 最初始的store接收action作为参数，action必须是一个对象\n      dispatch = compose<typeof dispatch>(...chain)(store.dispatch)\n\n      return {\n        ...store,\n        dispatch\n      }\n    }\n}\n","// functions\nimport createStore from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport warning from './utils/warning'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// types\n// store\nexport {\n  CombinedState,\n  PreloadedState,\n  Dispatch,\n  Unsubscribe,\n  Observable,\n  Observer,\n  Store,\n  StoreCreator,\n  StoreEnhancer,\n  StoreEnhancerStoreCreator,\n  ExtendState\n} from './types/store'\n// reducers\nexport {\n  Reducer,\n  ReducerFromReducersMapObject,\n  ReducersMapObject,\n  StateFromReducersMapObject,\n  ActionFromReducer,\n  ActionFromReducersMapObject\n} from './types/reducers'\n// action creators\nexport { ActionCreator, ActionCreatorsMapObject } from './types/actions'\n// middleware\nexport { MiddlewareAPI, Middleware } from './types/middleware'\n// actions\nexport { Action, AnyAction } from './types/actions'\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\nfunction isCrushed() {}\n\nif (\n  process.env.NODE_ENV !== 'production' &&\n  typeof isCrushed.name === 'string' &&\n  isCrushed.name !== 'isCrushed'\n) {\n  warning(\n    'You are currently using minified code outside of NODE_ENV === \"production\". ' +\n      'This means that you are running a slower development build of Redux. ' +\n      'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' +\n      'or setting mode to production in webpack (https://webpack.js.org/configuration/mode/) ' +\n      'to ensure you have the correct code for your production build.'\n  )\n}\n\nexport {\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n}\n"],"names":["$$observable","Symbol","observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","Object","getPrototypeOf","miniKindOf","val","type","Array","isArray","isDate","isError","constructorName","ctorName","prototype","call","slice","toLowerCase","replace","constructor","name","Error","message","stackTraceLimit","Date","toDateString","getDate","setDate","kindOf","typeOfVal","createStore","reducer","preloadedState","enhancer","arguments","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","listeners","i","length","replaceReducer","nextReducer","store","outerSubscribe","observer","observeState","observerAsObserver","next","warning","console","error","e","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","unexpectedKeys","filter","key","hasOwnProperty","forEach","assertReducerShape","initialState","combineReducers","finalReducers","finalReducerKeys","shapeAssertionError","combination","state","warningMessage","hasChanged","nextState","previousStateForKey","nextStateForKey","actionType","String","bindActionCreator","actionCreator","args","apply","bindActionCreators","actionCreators","boundActionCreators","compose","funcs","arg","reduce","a","b","applyMiddleware","middlewares","middlewareAPI","chain","map","middleware","isCrushed"],"mappings":";;;;;;AAMA,IAAMA,YAAY,kBAAoB;AAAA,SACnC,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,UAAxC,IAAuD,cADnB;AAAA,CAAD,EAArC;;AAGA,qBAAeF,YAAf;;ACTA;;;;;;AAOA,IAAMG,YAAY,GAAG,SAAfA,YAAe;AAAA,SACnBC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwCC,KAAxC,CAA8C,EAA9C,EAAkDC,IAAlD,CAAuD,GAAvD,CADmB;AAAA,CAArB;;AAGA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,kCAAiCR,YAAY,EAD/B;AAElBS,EAAAA,OAAO,qCAAoCT,YAAY,EAFrC;AAGlBU,EAAAA,oBAAoB,EAAE;AAAA,4CAAqCV,YAAY,EAAjD;AAAA;AAHJ,CAApB;AAMA,oBAAeO,WAAf;;AChBA;;;;SAIwBI,cAAcC;AACpC,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C,OAAO,KAAP;AAE7C,MAAIC,KAAK,GAAGD,GAAZ;;AACA,SAAOE,MAAM,CAACC,cAAP,CAAsBF,KAAtB,MAAiC,IAAxC,EAA8C;AAC5CA,IAAAA,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBF,KAAtB,CAAR;AACD;;AAED,SAAOC,MAAM,CAACC,cAAP,CAAsBH,GAAtB,MAA+BC,KAAtC;AACD;;ACbD;SACgBG,WAAWC;AACzB,MAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB,OAAO,WAAP;AACpB,MAAIA,GAAG,KAAK,IAAZ,EAAkB,OAAO,MAAP;AAElB,MAAMC,IAAI,GAAG,OAAOD,GAApB;;AACA,UAAQC,IAAR;AACE,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,UAAL;AAAiB;AACf,eAAOA,IAAP;AACD;AAPH;;AAUA,MAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB,OAAO,OAAP;AACxB,MAAII,MAAM,CAACJ,GAAD,CAAV,EAAiB,OAAO,MAAP;AACjB,MAAIK,OAAO,CAACL,GAAD,CAAX,EAAkB,OAAO,OAAP;AAElB,MAAMM,eAAe,GAAGC,QAAQ,CAACP,GAAD,CAAhC;;AACA,UAAQM,eAAR;AACE,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,SAAL;AACA,SAAK,SAAL;AACA,SAAK,KAAL;AACA,SAAK,KAAL;AACE,aAAOA,eAAP;AAPJ;;;AAWA,SAAOT,MAAM,CAACW,SAAP,CAAiBtB,QAAjB,CACJuB,IADI,CACCT,GADD,EAEJU,KAFI,CAEE,CAFF,EAEK,CAAC,CAFN,EAGJC,WAHI,GAIJC,OAJI,CAII,KAJJ,EAIW,EAJX,CAAP;AAKD;;AAED,SAASL,QAAT,CAAkBP,GAAlB;AACE,SAAO,OAAOA,GAAG,CAACa,WAAX,KAA2B,UAA3B,GAAwCb,GAAG,CAACa,WAAJ,CAAgBC,IAAxD,GAA+D,IAAtE;AACD;;AAED,SAAST,OAAT,CAAiBL,GAAjB;AACE,SACEA,GAAG,YAAYe,KAAf,IACC,OAAOf,GAAG,CAACgB,OAAX,KAAuB,QAAvB,IACChB,GAAG,CAACa,WADL,IAEC,OAAOb,GAAG,CAACa,WAAJ,CAAgBI,eAAvB,KAA2C,QAJ/C;AAMD;;AAED,SAASb,MAAT,CAAgBJ,GAAhB;AACE,MAAIA,GAAG,YAAYkB,IAAnB,EAAyB,OAAO,IAAP;AACzB,SACE,OAAOlB,GAAG,CAACmB,YAAX,KAA4B,UAA5B,IACA,OAAOnB,GAAG,CAACoB,OAAX,KAAuB,UADvB,IAEA,OAAOpB,GAAG,CAACqB,OAAX,KAAuB,UAHzB;AAKD;;SAEeC,OAAOtB;AACrB,MAAIuB,SAAS,GAAW,OAAOvB,GAA/B;;AAEA,EAA2C;AACzCuB,IAAAA,SAAS,GAAGxB,UAAU,CAACC,GAAD,CAAtB;AACD;;AAED,SAAOuB,SAAP;AACD;;SCRuBC,YAMtBC,SACAC,gBACAC;;;AAEA,MACG,OAAOD,cAAP,KAA0B,UAA1B,IAAwC,OAAOC,QAAP,KAAoB,UAA7D,IACC,OAAOA,QAAP,KAAoB,UAApB,IAAkC,OAAOC,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAF7D,EAGE;AAAA,oBAEE,8DACA,8DADA,GAEA,6IAJF;AAMD;;AAED,MAAI,OAAOF,cAAP,KAA0B,UAA1B,IAAwC,OAAOC,QAAP,KAAoB,WAAhE,EAA6E;AAC3EA,IAAAA,QAAQ,GAAGD,cAAX;AACAA,IAAAA,cAAc,GAAGG,SAAjB;AACD;;AAED,MAAI,OAAOF,QAAP,KAAoB,WAAxB,EAAqC;AACnC,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAAA,uFAE+BL,MAAM,CACnEK,QADmE,CAFrC;AAMnC;;AAED,WAAOA,QAAQ,CAACH,WAAD,CAAR,CACLC,OADK,EAELC,cAFK,CAAP;AAID;;AAED,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AAAA,yFAEoCH,MAAM,CACvEG,OADuE,CAF1C;AAMlC;;AAED,MAAIK,cAAc,GAAGL,OAArB;AACA,MAAIM,YAAY,GAAGL,cAAnB;AACA,MAAIM,gBAAgB,GAA0B,EAA9C;AACA,MAAIC,aAAa,GAAGD,gBAApB;AACA,MAAIE,aAAa,GAAG,KAApB;AAEA;;;;;;;;AAOA,WAASC,4BAAT;AACE,QAAIF,aAAa,KAAKD,gBAAtB,EAAwC;AACtCC,MAAAA,aAAa,GAAGD,gBAAgB,CAACtB,KAAjB,EAAhB;AACD;AACF;AAED;;;;;;;AAKA,WAAS0B,QAAT;AACE,QAAIF,aAAJ,EAAmB;AAAA,sBAEf,uEACA,6DADA,GAEA,yEAJe;AAMlB;;AAED,WAAOH,YAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAASM,SAAT,CAAmBC,QAAnB;AACE,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAAA,uFAE+BhB,MAAM,CACnEgB,QADmE,CAFrC;AAMnC;;AAED,QAAIJ,aAAJ,EAAmB;AAAA,sBAEf,wEACA,sFADA,GAEA,oFAFA,GAGA,wEALe;AAOlB;;AAED,QAAIK,YAAY,GAAG,IAAnB;AAEAJ,IAAAA,4BAA4B;AAC5BF,IAAAA,aAAa,CAACO,IAAd,CAAmBF,QAAnB;AAEA,WAAO,SAASG,WAAT;AACL,UAAI,CAACF,YAAL,EAAmB;AACjB;AACD;;AAED,UAAIL,aAAJ,EAAmB;AAAA,wBAEf,mFACA,wEAHe;AAKlB;;AAEDK,MAAAA,YAAY,GAAG,KAAf;AAEAJ,MAAAA,4BAA4B;AAC5B,UAAMO,KAAK,GAAGT,aAAa,CAACU,OAAd,CAAsBL,QAAtB,CAAd;AACAL,MAAAA,aAAa,CAACW,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACAV,MAAAA,gBAAgB,GAAG,IAAnB;AACD,KAlBD;AAmBD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,WAASa,QAAT,CAAkBC,MAAlB;AACE,QAAI,CAACpD,aAAa,CAACoD,MAAD,CAAlB,EAA4B;AAAA,yFAEyCxB,MAAM,CACrEwB,MADqE,CAF/C;AAM3B;;AAED,QAAI,OAAOA,MAAM,CAAC7C,IAAd,KAAuB,WAA3B,EAAwC;AAAA,sBAEpC,4GAFoC;AAIvC;;AAED,QAAIiC,aAAJ,EAAmB;AAAA,sBACD,oCADC;AAElB;;AAED,QAAI;AACFA,MAAAA,aAAa,GAAG,IAAhB;AACAH,MAAAA,YAAY,GAAGD,cAAc,CAACC,YAAD,EAAee,MAAf,CAA7B;AACD,KAHD,SAGU;AACRZ,MAAAA,aAAa,GAAG,KAAhB;AACD;;AAED,QAAMa,SAAS,GAAIf,gBAAgB,GAAGC,aAAtC;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAMV,QAAQ,GAAGS,SAAS,CAACC,CAAD,CAA1B;AACAV,MAAAA,QAAQ;AACT;;AAED,WAAOQ,MAAP;AACD;AAED;;;;;;;;;;;;AAUA,WAASI,cAAT,CACEC,WADF;AAGE,QAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;AAAA,0FAE+B7B,MAAM,CACtE6B,WADsE,CAFrC;AAMtC;AAGErB,IAAAA,cAA2D,GAAGqB,WAA9D;AAGH;AACA;AACA;;AACAN,IAAAA,QAAQ,CAAC;AAAE5C,MAAAA,IAAI,EAAEX,aAAW,CAACE;AAApB,KAAD,CAAR;;AAEA,WAAO4D,KAAP;AAOD;AAED;;;;;;;;AAMA,WAAStE,UAAT;;;AACE,QAAMuE,cAAc,GAAGhB,SAAvB;AACA;AACE;;;;;;;;AAQAA,MAAAA,SATF,qBASYiB,QATZ;AAUI,YAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AAAA,0FAEWhC,MAAM,CAClEgC,QADkE,CAFjB;AAMtD;;AAED,iBAASC,YAAT;AACE,cAAMC,kBAAkB,GAAGF,QAA3B;;AACA,cAAIE,kBAAkB,CAACC,IAAvB,EAA6B;AAC3BD,YAAAA,kBAAkB,CAACC,IAAnB,CAAwBrB,QAAQ,EAAhC;AACD;AACF;;AAEDmB,QAAAA,YAAY;AACZ,YAAMd,WAAW,GAAGY,cAAc,CAACE,YAAD,CAAlC;AACA,eAAO;AAAEd,UAAAA,WAAW,EAAXA;AAAF,SAAP;AACD;AA5BH,YA8BG7D,cA9BH;AA+BI,aAAO,IAAP;AACD,KAhCH;AAkCD;AAGD;AACA;;;AACAiE,EAAAA,QAAQ,CAAC;AAAE5C,IAAAA,IAAI,EAAEX,aAAW,CAACC;AAApB,GAAD,CAAR;AAEA,MAAM6D,KAAK;AACTP,IAAAA,QAAQ,EAAEA,QADD;AAETR,IAAAA,SAAS,EAATA,SAFS;AAGTD,IAAAA,QAAQ,EAARA,QAHS;AAITc,IAAAA,cAAc,EAAdA;AAJS,YAKRtE,cALQ,IAKOE,UALP,SAAX;AAOA,SAAOsE,KAAP;AACD;;ACjXD;;;;;SAKwBM,QAAQ1C;AAC9B;AACA,MAAI,OAAO2C,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA/D,EAA2E;AACzED,IAAAA,OAAO,CAACC,KAAR,CAAc5C,OAAd;AACD;AACD;;;AACA,MAAI;AACF;AACA;AACA;AACA,UAAM,IAAID,KAAJ,CAAUC,OAAV,CAAN;AACD,GALD,CAKE,OAAO6C,CAAP,EAAU;;AACb;;ACHD,SAASC,qCAAT,CACEC,UADF,EAEEC,QAFF,EAGElB,MAHF,EAIEmB,kBAJF;AAME,MAAMC,WAAW,GAAGrE,MAAM,CAACsE,IAAP,CAAYH,QAAZ,CAApB;AACA,MAAMI,YAAY,GAChBtB,MAAM,IAAIA,MAAM,CAAC7C,IAAP,KAAgBX,aAAW,CAACC,IAAtC,GACI,+CADJ,GAEI,wCAHN;;AAKA,MAAI2E,WAAW,CAACjB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WACE,wEACA,4DAFF;AAID;;AAED,MAAI,CAACvD,aAAa,CAACqE,UAAD,CAAlB,EAAgC;AAC9B,WACE,SAAOK,YAAP,kCAA+C9C,MAAM,CACnDyC,UADmD,CAArD,+EAGUG,WAAW,CAAC7E,IAAZ,CAAiB,MAAjB,CAHV,QADF;AAMD;;AAED,MAAMgF,cAAc,GAAGxE,MAAM,CAACsE,IAAP,CAAYJ,UAAZ,EAAwBO,MAAxB,CACrB,UAAAC,GAAG;AAAA,WAAI,CAACP,QAAQ,CAACQ,cAAT,CAAwBD,GAAxB,CAAD,IAAiC,CAACN,kBAAkB,CAACM,GAAD,CAAxD;AAAA,GADkB,CAAvB;AAIAF,EAAAA,cAAc,CAACI,OAAf,CAAuB,UAAAF,GAAG;AACxBN,IAAAA,kBAAkB,CAACM,GAAD,CAAlB,GAA0B,IAA1B;AACD,GAFD;AAIA,MAAIzB,MAAM,IAAIA,MAAM,CAAC7C,IAAP,KAAgBX,aAAW,CAACE,OAA1C,EAAmD;;AAEnD,MAAI6E,cAAc,CAACpB,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,WACE,iBAAcoB,cAAc,CAACpB,MAAf,GAAwB,CAAxB,GAA4B,MAA5B,GAAqC,KAAnD,kBACIoB,cAAc,CAAChF,IAAf,CAAoB,MAApB,CADJ,oBAC6C+E,YAD7C,gFAGIF,WAAW,CAAC7E,IAAZ,CAAiB,MAAjB,CAHJ,0CADF;AAMD;AACF;;AAED,SAASqF,kBAAT,CAA4BV,QAA5B;AACE;AACAnE,EAAAA,MAAM,CAACsE,IAAP,CAAYH,QAAZ,EAAsBS,OAAtB,CAA8B,UAAAF,GAAG;AAC/B,QAAM9C,OAAO,GAAGuC,QAAQ,CAACO,GAAD,CAAxB;AACA,QAAMI,YAAY,GAAGlD,OAAO,CAACI,SAAD,EAAY;AAAE5B,MAAAA,IAAI,EAAEX,aAAW,CAACC;AAApB,KAAZ,CAA5B;;AAEA,QAAI,OAAOoF,YAAP,KAAwB,WAA5B,EAAyC;AAAA,sBAErC,iCAA8BJ,GAA9B,sSAFqC;AAQxC;;;AAED,QACE,OAAO9C,OAAO,CAACI,SAAD,EAAY;AACxB5B,MAAAA,IAAI,EAAEX,aAAW,CAACG,oBAAZ;AADkB,KAAZ,CAAd,KAEO,WAHT,EAIE;AAAA,sBAEE,iCAA8B8E,GAA9B,yFACwBjF,aAAW,CAACC,IADpC,wUAFF;AASD;AACF,GA5BD;AA6BD;;SAgCuBqF,gBAAgBZ;AACtC;AACA,MAAME,WAAW,GAAGrE,MAAM,CAACsE,IAAP,CAAYH,QAAZ,CAApB;AACA,MAAMa,aAAa,GAAsB,EAAzC;;AACA,OAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,WAAW,CAACjB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAMuB,GAAG,GAAGL,WAAW,CAAClB,CAAD,CAAvB;;AAEA,IAA2C;AACzC,UAAI,OAAOgB,QAAQ,CAACO,GAAD,CAAf,KAAyB,WAA7B,EAA0C;AACxCb,QAAAA,OAAO,oCAAiCa,GAAjC,QAAP;AACD;AACF,KAP0C;;;AAU3C,QAAI,OAAOP,QAAQ,CAACO,GAAD,CAAf,KAAyB,UAA7B,EAAyC;AACvCM,MAAAA,aAAa,CAACN,GAAD,CAAb,GAAqBP,QAAQ,CAACO,GAAD,CAA7B;AACD;AACF;;AACD,MAAMO,gBAAgB,GAAGjF,MAAM,CAACsE,IAAP,CAAYU,aAAZ,CAAzB;AAGA;;AACA,MAAIZ,kBAAJ;;AACA,EAA2C;AACzCA,IAAAA,kBAAkB,GAAG,EAArB;AACD;;AAED,MAAIc,mBAAJ;;AACA,MAAI;AACFL,IAAAA,kBAAkB,CAACG,aAAD,CAAlB;AACD,GAFD,CAEE,OAAOhB,CAAP,EAAU;AACVkB,IAAAA,mBAAmB,GAAGlB,CAAtB;AACD;AAED;AACA;;;AACA,SAAO,SAASmB,WAAT,CACLC,KADK,EAELnC,MAFK;QACLmC;AAAAA,MAAAA,QAAqD;;;AAGrD,QAAIF,mBAAJ,EAAyB;AACvB,YAAMA,mBAAN;AACD;;AAED,IAA2C;AACzC,UAAMG,cAAc,GAAGpB,qCAAqC,CAC1DmB,KAD0D,EAE1DJ,aAF0D,EAG1D/B,MAH0D,EAI1DmB,kBAJ0D,CAA5D;;AAMA,UAAIiB,cAAJ,EAAoB;AAClBxB,QAAAA,OAAO,CAACwB,cAAD,CAAP;AACD;AACF;;AAED,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAMC,SAAS,GAAgD,EAA/D;;AACA,SAAK,IAAIpC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG8B,gBAAgB,CAAC7B,MAArC,EAA6CD,EAAC,EAA9C,EAAkD;AAChD;AACA,UAAMuB,IAAG,GAAGO,gBAAgB,CAAC9B,EAAD,CAA5B,CAFgD;;AAIhD,UAAMvB,OAAO,GAAGoD,aAAa,CAACN,IAAD,CAA7B,CAJgD;;AAMhD,UAAMc,mBAAmB,GAAGJ,KAAK,CAACV,IAAD,CAAjC,CANgD;;AAQhD,UAAMe,eAAe,GAAG7D,OAAO,CAAC4D,mBAAD,EAAsBvC,MAAtB,CAA/B;;AACA,UAAI,OAAOwC,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,YAAMC,UAAU,GAAGzC,MAAM,IAAIA,MAAM,CAAC7C,IAApC;AAD0C,wBAGxC,yCAAsCsF,UAAU,UAAOC,MAAM,CAACD,UAAD,CAAb,UAA+B,gBAA/E,uCACgChB,IADhC,8LAHwC;AAQ3C;;AACDa,MAAAA,SAAS,CAACb,IAAD,CAAT,GAAiBe,eAAjB,CAlBgD;;AAoBhDH,MAAAA,UAAU,GAAGA,UAAU,IAAIG,eAAe,KAAKD,mBAA/C;AACD;;;AAEDF,IAAAA,UAAU,GACRA,UAAU,IAAIL,gBAAgB,CAAC7B,MAAjB,KAA4BpD,MAAM,CAACsE,IAAP,CAAYc,KAAZ,EAAmBhC,MAD/D;AAEA,WAAOkC,UAAU,GAAGC,SAAH,GAAeH,KAAhC;AACD,GAhDD;AAiDD;;AC1MD,SAASQ,iBAAT,CACEC,aADF,EAEE7C,QAFF;AAIE,SAAO;sCAAwB8C;AAAAA,MAAAA;;;AAC7B,WAAO9C,QAAQ,CAAC6C,aAAa,CAACE,KAAd,CAAoB,IAApB,EAA0BD,IAA1B,CAAD,CAAf;AACD,GAFD;AAGD;;SA0CuBE,mBACtBC,gBACAjD;AAEA,MAAI,OAAOiD,cAAP,KAA0B,UAA9B,EAA0C;AACxC,WAAOL,iBAAiB,CAACK,cAAD,EAAiBjD,QAAjB,CAAxB;AACD;;AAED,MAAI,OAAOiD,cAAP,KAA0B,QAA1B,IAAsCA,cAAc,KAAK,IAA7D,EAAmE;AAAA,oBAE/D,iFAA+ExE,MAAM,CACnFwE,cADmF,CAArF,yGAF+D;AAOlE;;AAED,MAAMC,mBAAmB,GAA4B,EAArD;;AACA,OAAK,IAAMxB,GAAX,IAAkBuB,cAAlB,EAAkC;AAChC,QAAMJ,aAAa,GAAGI,cAAc,CAACvB,GAAD,CAApC;;AACA,QAAI,OAAOmB,aAAP,KAAyB,UAA7B,EAAyC;AACvCK,MAAAA,mBAAmB,CAACxB,GAAD,CAAnB,GAA2BkB,iBAAiB,CAACC,aAAD,EAAgB7C,QAAhB,CAA5C;AACD;AACF;;AACD,SAAOkD,mBAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCrCuBC;oCAAWC;AAAAA,IAAAA;;;AACjC,MAAIA,KAAK,CAAChD,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,WAAO,UAAIiD,GAAJ;AAAA,aAAeA,GAAf;AAAA,KAAP;AACD;;AAED,MAAID,KAAK,CAAChD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOgD,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,SAAOA,KAAK,CAACE,MAAN,CACL,UAACC,CAAD,EAAIC,CAAJ;AAAA,WACE;AAAA,aACED,CAAC,CAACC,CAAC,MAAD,mBAAD,CADH;AAAA,KADF;AAAA,GADK,CAAP;AAKD;;SCDuBC;oCACnBC;AAAAA,IAAAA;;;AAEH;AACA,SAAO,UAAC/E,WAAD;AAAA,WACL,UACEC,OADF,EAEEC,cAFF;AAIE,UAAM0B,KAAK,GAAG5B,WAAW,CAACC,OAAD,EAAUC,cAAV,CAAzB;;AACA,UAAImB,SAAQ,GAAa;wBAErB,oEACA;AAEH,OALD;;;AAOA,UAAM2D,aAAa,GAAkB;AACnCpE,QAAAA,QAAQ,EAAEgB,KAAK,CAAChB,QADmB;AAEnCS,QAAAA,QAAQ,EAAE,kBAACC,MAAD;AAAA,6CAAY6C,IAAZ;AAAYA,YAAAA,IAAZ;AAAA;;AAAA,iBAAqB9C,SAAQ,MAAR,UAASC,MAAT,SAAoB6C,IAApB,EAArB;AAAA;AAFyB,OAArC;AAIA,UAAMc,KAAK,GAAGF,WAAW,CAACG,GAAZ,CAAgB,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACH,aAAD,CAAd;AAAA,OAA1B,CAAd;;AAEA3D,MAAAA,SAAQ,GAAGmD,OAAO,MAAP,SAA4BS,KAA5B,EAAmCrD,KAAK,CAACP,QAAzC,CAAX;AAEA,+CACKO,KADL;AAEEP,QAAAA,QAAQ,EAARA;AAFF;AAID,KAzBI;AAAA,GAAP;AA0BD;;ACzFD;AAwCA;;;;;AAIA,SAAS+D,SAAT;;AAEA,IAEE,OAAOA,SAAS,CAAC9F,IAAjB,KAA0B,QAD1B,IAEA8F,SAAS,CAAC9F,IAAV,KAAmB,WAHrB,EAIE;AACA4C,EAAAA,OAAO,CACL,iFACE,uEADF,GAEE,oFAFF,GAGE,wFAHF,GAIE,gEALG,CAAP;AAOD;;;;;;;;;;;;;;;"}